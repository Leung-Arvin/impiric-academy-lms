// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x"]
  
  previewFeatures = ["fullTextSearch","fullTextIndex"]
}

model Course {
  id String @id @default(auto()) @db.ObjectId @map("_id")
  userId String
  title String 
  description String? 
  imageUrl String? 
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields:[categoryId], references:[id])

  chapters Chapter[]

  attachments Attachement[]

  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(auto()) @db.ObjectId @map("_id")
  name String @unique
  courses Course[]
}

model Attachement {
  id String @id @default(auto()) @db.ObjectId @map("_id")
  name String
  url String 

  courseId String
  course Course @relation(fields: [courseId], references:[id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(auto()) @db.ObjectId @map("_id")
  title String
  description String? 
  videoUrl String? 
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  video Video?

  courseId String
  course Course @relation(fields: [courseId], references:[id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Video {
  id String @id @default(auto()) @db.ObjectId @map("_id")
  embedlink String 
  
  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references:[id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(auto()) @db.ObjectId @map("_id")
  userId String
  
  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete:Cascade)
  
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId,chapterId])
}

model Purchase {
  id String @id @default(auto()) @db.ObjectId @map("_id")
  userId String
  
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // unique decorater ensures users cannot purchase a course twice
  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(auto()) @db.ObjectId @map("_id")
  userId String @unique
  stripeCustomerId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}